use("cinema")
db.newmovies.find()
// db.newmovies.findOne({title: "Godzilla"})

// Exercício 3: Altere budget para 15 e imdbRating para 5.5 no filme Home Alone.
use("cinema")
db.newmovies.update(
    {title: "Home Alone"}, 
    {$set: {
        imdbRating: 5.5,
        budget: 15
    }})

// Exercício 4: Aumente em 2 o imdbRating do filme Batman.
use("cinema")
db.newmovies.update(
    {title: "Batman"}, 
    {$inc: {
        imdbRating: 2,
    }})

// Exercício 6: Multiplique por 4 o imdbRating do filme Batman.
use("cinema")
db.newmovies.update(
    {title: "Batman"}, 
    {$mul: {
        imdbRating: NumberInt(4),
    }})

// Exercício 7: Renomeie o campo budget para estimatedBudget do filme Batman.
use("cinema")
db.newmovies.updateOne(
  { title: "Batman" },
  { $rename: { 
    budget: "estimatedBudget" 
    } },
);

// Exercício 8: Utilize o operador $min para alterar o budget para 5 do filme Home Alone.
use("cinema")
db.newmovies.updateOne(
  { title: "Home Alone" },
  { $min: { 
    budget: 5 
    } },
);

// Exercício 9: Utilize o operador $max para alterar o imdbRating para 8.6 do filme Godzilla. Além disso, altere a categoria "adventure" para "thriller" do filme Godzilla.
use("cinema")
db.newmovies.updateOne(
  { title: "Godzilla" },
  { $max: { 
    imdbRating: 8.6 
    },
    $set: {
    "category.1": "thriller" }
    },
);

// Exercício 10: Utilizando o operador $currentDate, crie um campo chamado lastUpdated com o tipo timestamp no filme Home Alone.
use("cinema")
db.newmovies.updateOne(
  { title: "Home Alone" },
  { $currentDate: { 
    lastUpdated: {$type: "timestamp"}
    }
    },
);

// Exercício 11: Utilizando uma única operação, crie um campo chamado sequels e atribua a ele o valor 0 em todos os documentos.
use("cinema")
db.newmovies.updateMany(
  { },
  { $set: {sequels: 0}
    },
);